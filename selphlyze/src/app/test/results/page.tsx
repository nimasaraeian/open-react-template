'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Header from '@/components/Header';
import { 
  Brain, 
  Award, 
  TrendingUp, 
  Heart, 
  Briefcase, 
  Download, 
  Share2,
  Sparkles,
  Loader2
} from 'lucide-react';

interface AnalysisResult {
  selfCode: string;
  personalitySummary: string;
  coreStrengths: string[];
  personalityTraits: {
    decisionMaking: string;
    socialPreferences: string;
    learningApproach: string;
    communicationStyle: string;
    stressManagement: string;
    valuesAndMotivations: string;
  };
  growthAreas: string[];
  careerInsights: string;
  relationshipDynamics: string;
}

const ResultsPage = () => {
  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    const analyzeResults = async () => {
      try {
        const testDataStr = localStorage.getItem('testData');
        if (!testDataStr) {
          router.push('/tests');
          return;
        }

        const testData = JSON.parse(testDataStr);
        
        const response = await fetch('/api/analyze', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(testData),
        });

        if (!response.ok) {
          throw new Error('Failed to analyze results');
        }

        const result = await response.json();
        setAnalysis(result.analysis);
      } catch (err) {
        setError('Failed to generate your analysis. Please try again.');
        console.error('Analysis error:', err);
      } finally {
        setLoading(false);
      }
    };

    analyzeResults();
  }, [router]);

  const handleShare = () => {
    if (analysis) {
      const shareText = `I just discovered my SelfCode: ${analysis.selfCode} on Selphlyze! ${analysis.personalitySummary}`;
      if (navigator.share) {
        navigator.share({
          title: 'My Selphlyze Results',
          text: shareText,
          url: window.location.origin,
        });
      } else {
        navigator.clipboard.writeText(shareText);
        alert('Results copied to clipboard!');
      }
    }
  };

  const handleDownload = () => {
    if (analysis) {
      const resultsText = `
SELPHLYZE PSYCHOLOGICAL ANALYSIS REPORT
======================================

SelfCode: ${analysis.selfCode}

PERSONALITY SUMMARY:
${analysis.personalitySummary}

CORE STRENGTHS:
${analysis.coreStrengths.map(strength => `• ${strength}`).join('\n')}

PERSONALITY TRAITS:
• Decision Making: ${analysis.personalityTraits.decisionMaking}
• Social Preferences: ${analysis.personalityTraits.socialPreferences}
• Learning Approach: ${analysis.personalityTraits.learningApproach}
• Communication Style: ${analysis.personalityTraits.communicationStyle}
• Stress Management: ${analysis.personalityTraits.stressManagement}
• Values & Motivations: ${analysis.personalityTraits.valuesAndMotivations}

GROWTH AREAS:
${analysis.growthAreas.map(area => `• ${area}`).join('\n')}

CAREER INSIGHTS:
${analysis.careerInsights}

RELATIONSHIP DYNAMICS:
${analysis.relationshipDynamics}

Generated by Selphlyze - ${new Date().toLocaleDateString()}
      `;

      const blob = new Blob([resultsText], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `selphlyze-results-${analysis.selfCode}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
        <Header />
        <div className="flex items-center justify-center min-h-[60vh]">
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-16 h-16 rounded-full gradient-bg mb-4">
              <Loader2 className="w-8 h-8 text-white animate-spin" />
            </div>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">Analyzing Your Results</h2>
            <p className="text-gray-600">Our AI is processing your responses to generate personalized insights...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error || !analysis) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
        <Header />
        <div className="flex items-center justify-center min-h-[60vh]">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">Something went wrong</h2>
            <p className="text-gray-600 mb-4">{error}</p>
            <button 
              onClick={() => router.push('/tests')}
              className="btn-primary"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      <Header />
      
      <main className="py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-6xl mx-auto">
          {/* SelfCode Header */}
          <div className="text-center mb-12">
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full gradient-bg mb-6">
              <Sparkles className="w-10 h-10 text-white" />
            </div>
            
            <h1 className="text-4xl md:text-5xl font-bold mb-4">
              Your <span className="gradient-text">SelfCode</span>
            </h1>
            
            <div className="text-6xl md:text-8xl font-bold gradient-text tracking-wider mb-6">
              {analysis.selfCode}
            </div>
            
            <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed mb-8">
              {analysis.personalitySummary}
            </p>
            
            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button onClick={handleDownload} className="btn-primary inline-flex items-center space-x-2">
                <Download className="w-5 h-5" />
                <span>Download Report</span>
              </button>
              <button onClick={handleShare} className="btn-outline inline-flex items-center space-x-2">
                <Share2 className="w-5 h-5" />
                <span>Share Results</span>
              </button>
            </div>
          </div>

          {/* Core Strengths */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8 mb-8">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-primary to-accent flex items-center justify-center mr-4">
                <Award className="w-6 h-6 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-gray-900">Core Strengths</h2>
            </div>
            <div className="grid md:grid-cols-2 gap-4">
              {analysis.coreStrengths.map((strength, index) => (
                <div key={index} className="flex items-center p-4 bg-primary/5 rounded-lg border border-primary/10">
                  <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center mr-3">
                    <span className="text-white font-bold text-sm">{index + 1}</span>
                  </div>
                  <span className="font-medium text-gray-900">{strength}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Personality Traits */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8 mb-8">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-secondary to-primary flex items-center justify-center mr-4">
                <Brain className="w-6 h-6 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-gray-900">Personality Traits</h2>
            </div>
            <div className="grid lg:grid-cols-2 gap-6">
              {Object.entries(analysis.personalityTraits).map(([key, value]) => (
                <div key={key} className="p-4 bg-gray-50 rounded-lg">
                  <h3 className="font-semibold text-gray-900 mb-2 capitalize">
                    {key.replace(/([A-Z])/g, ' $1').trim()}
                  </h3>
                  <p className="text-gray-700">{value}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Growth Areas */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8 mb-8">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-accent to-secondary flex items-center justify-center mr-4">
                <TrendingUp className="w-6 h-6 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-gray-900">Growth Opportunities</h2>
            </div>
            <div className="space-y-4">
              {analysis.growthAreas.map((area, index) => (
                <div key={index} className="flex items-start p-4 bg-accent/5 rounded-lg border border-accent/10">
                  <div className="w-6 h-6 rounded-full bg-accent flex items-center justify-center mr-3 mt-1">
                    <span className="text-white font-bold text-xs">{index + 1}</span>
                  </div>
                  <span className="text-gray-900">{area}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Career & Relationships */}
          <div className="grid lg:grid-cols-2 gap-8">
            {/* Career Insights */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
              <div className="flex items-center mb-6">
                <div className="w-12 h-12 rounded-xl gradient-bg flex items-center justify-center mr-4">
                  <Briefcase className="w-6 h-6 text-white" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900">Career Insights</h2>
              </div>
              <p className="text-gray-700 leading-relaxed">{analysis.careerInsights}</p>
            </div>

            {/* Relationship Dynamics */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
              <div className="flex items-center mb-6">
                <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-secondary to-accent flex items-center justify-center mr-4">
                  <Heart className="w-6 h-6 text-white" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900">Relationship Dynamics</h2>
              </div>
              <p className="text-gray-700 leading-relaxed">{analysis.relationshipDynamics}</p>
            </div>
          </div>

          {/* Call to Action */}
          <div className="text-center mt-16 p-8 gradient-bg rounded-2xl">
            <h3 className="text-2xl font-bold text-white mb-4">Continue Your Journey</h3>
            <p className="text-white/90 mb-6 max-w-2xl mx-auto">
              Your SelfCode is just the beginning. Explore more tests and discover different aspects of your personality.
            </p>
            <button 
              onClick={() => router.push('/tests')}
              className="bg-white text-primary hover:bg-gray-100 font-semibold py-3 px-8 rounded-lg transition-all duration-200"
            >
              Take Another Test
            </button>
          </div>
        </div>
      </main>
    </div>
  );
};

export default ResultsPage;